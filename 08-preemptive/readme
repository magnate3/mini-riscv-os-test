==================================== changes
the original project is riscv-operating-system-mooc-main/08-preemptive,
I have do some changes to run in qemu-system-riscv64
(1)change file:
 Makefile
 os.ld
 start.S
 entry.S
 
(2)change function
trap_handler of trap.c

(3)change data structure
types.h:reg_t
os.h: struct context

# qemu-system-riscv64 -M virt -kernel kernel.img -bios none -serial stdio -display none
Press Ctrl-A and then X to exit QEMU
------------------------------------
Hello, RVOS!
Sync exceptions!, code = 2 and epc 800001e4 
panic: OOPS! What can I do!


======================================== through objudmp 

0000000080000160 <switch_to>:
    80000160:   34051073                csrw    mscratch,a0
    80000164:   7d6c                    ld      a1,248(a0)
    ………………………………………………………………………………………………………………………………………………
    800001b0:   090fb983                ld      s3,144(t6)
    800001b4:   098fba03                ld      s4,152(t6)
    800001b8:   0a0fba83                ld      s5,160(t6)
    800001bc:   0a8fbb03                ld      s6,168(t6)
    800001c0:   0b0fbb83                ld      s7,176(t6)
    800001c4:   0b8fbc03                ld      s8,184(t6)
    800001c8:   0c0fbc83                ld      s9,192(t6)
    800001cc:   0c8fbd03                ld      s10,200(t6)
    800001d0:   0d0fbd83                ld      s11,208(t6)
    800001d4:   0d8fbe03                ld      t3,216(t6)
    800001d8:   0e0fbe83                ld      t4,224(t6)
    800001dc:   0e8fbf03                ld      t5,232(t6)
    800001e0:   0f0fbf83                ld      t6,240(t6)
    800001e4:   30200073                mret
	
========================================  in start.S add following code
···
    # Set mstatus.MPP to 3, so we still run in Machine mode after MRET.
    # Set mstatus.MPIE to 1, so MRET will enable the interrupt.
    li      t0, 3 << 11 | 1 << 7
    csrr    a1, mstatus
    or      t0, t0, a1
    csrw    mstatus, t0
···

========================================
# make run
Press Ctrl-A and then X to exit QEMU
------------------------------------
Hello, RVOS!
Task 0: Created!
software interruption!
Task 1: Created!
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
external interruption!

Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
external interruption!

Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
Task 1: Running...
QEMU: Terminated




```
riscv64-linux-gnu-objcopy kernel.elf -I binary kernel.img
Press Ctrl-A and then X to exit QEMU
------------------------------------
Hello, RVOS!
Task 0: Created!
software interruption!
Task 1: Created!
Task 1: Running...
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 1
Task 0: I'm back!
Task 0: Running...
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 2
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 3
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 4
Task 1: Running...
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 5
Task 0: Running...
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 6
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 7
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 8
Task 1: Running...
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 9
Task 0: Running...
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 10
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 11
Task 0: Running...
Task 0: Running...
timer interruption!
tick: 12
Task 1: Running...
Task 1: Running...
Task 1: Running...
timer interruption!
tick: 13
Task 0: Running...
Task 0: Running...
QEMU: Terminated
```